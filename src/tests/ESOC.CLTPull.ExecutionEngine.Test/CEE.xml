<?xml version="1.0" encoding="utf-8" ?>
<ControlExecutionEvent>
  <ControlInformation>
    <ControlId>C123</ControlId>
    <!--<ControlType>FileLevel</ControlType>-->
    <ControlType>RecordLevel</ControlType>
    <!--<ControlType>Timeliness</ControlType>-->
    <Parent>
      <ControlId></ControlId>
      <Status></Status>
    </Parent>
  </ControlInformation>
  <LHS>
    <AdapterInformation>
      <AdapterType>
        <Sql>
          <ServerName></ServerName>
          <DatabaseName></DatabaseName>
          <UserName></UserName>
          <port></port>
          <Password></Password>
          <DataFetchRules>
            <LookbackDate>-2</LookbackDate>
            <Query>
              Select Count(*) from table1 where CreatedDate = {0}  <!--DateDiff(Gatedate(),-2)-->
              <Params>
                <Param>13-04-2010</Param>
                <Param></Param>
              </Params>
            </Query>
            <Result>
              <!--Can we pass json as a type-->
              <!--And We can see if we can use dynamic type here-->
            </Result>
            <!--Can we -->
          </DataFetchRules>
        </Sql>
        <Unix>
          <ServerName></ServerName>
          <UserName></UserName>
          <Password></Password>
          <FileIdentification>
            <UnixCommands>
              <Command></Command>
              <Command></Command>
            </UnixCommands>
          </FileIdentification>
          <DataFetchRules>
            <!--To open the file, Read, line count "Execute command (zcat, ls, wc -l, gunzip, unzip, view etc), Claenup"-->
            <IsMultipleFiles></IsMultipleFiles>
            <IsMultipleDirectories></IsMultipleDirectories>
            <!--Then we need to repeat unix commands for each of the files-->
            <UnixCommands>
              <Command></Command>
              <Command></Command>
            </UnixCommands>
            <Result>
              <Files>
                <FileCount></FileCount>
                <File>
                  <Name></Name>
                  <FileArrivalTime></FileArrivalTime>
                  <RecordCount></RecordCount>
                </File>
              </Files>
            </Result>
          </DataFetchRules>
        </Unix>
      </AdapterType>
    </AdapterInformation>
  </LHS>
  <RHS>
    <AdapterInformation>
      <AdapterType>
        <NAS>
          <UserName></UserName>
          <Password></Password>
          <FolderPaths>
            <FolderPath></FolderPath>
            <FolderPath></FolderPath>
          </FolderPaths>

          <!--Regex Pattern, Could be multiple Folders you need to search-->
          <FileIdentification>
            <Time>
              <FileFromDate></FileFromDate>
              <FileToDate></FileToDate>
              <TimeSpanInHours></TimeSpanInHours>
              <LookbackDate></LookbackDate>
            </Time>
            <FileNamePattern></FileNamePattern>
            <FileAttributes>
              <LastModifiedDate></LastModifiedDate>
              <FileArrivalTime></FileArrivalTime>
            </FileAttributes>
          </FileIdentification>
          <DataFetchRules>
            <FileRules>
              <IsDownloadFile>Yes</IsDownloadFile>
              <IsInZipFormat>Yes</IsInZipFormat>
              <GetFileCount>Yes</GetFileCount>
              <FileDataSerachPattern>*Success*</FileDataSerachPattern>
              <GetRowCount>Yes</GetRowCount>
              <Result>
                <Files>
                  <FileCount></FileCount>
                  <File>
                    <ParentName></ParentName>
                    <!--Zip File Name-->
                    <FileArrivalTime></FileArrivalTime>
                    <FileModifedDate></FileModifedDate>
                    <TimeZones></TimeZones>
                    <!--Phase2-->
                    <Name></Name>
                    <RecordCount></RecordCount>
                  </File>
                </Files>
              </Result>
            </FileRules>
          </DataFetchRules>
        </NAS>
        <ECG>
          <UserName></UserName>
          <Password></Password>
          <Customer></Customer>
          <ConfigId></ConfigId>
          <Application></Application>
          <StartDateLookbackTimeSpanInDays></StartDateLookbackTimeSpanInDays>
          <EndDateLookbackTimeSpanInDays></EndDateLookbackTimeSpanInDays>
          <FileName></FileName>
          <HostName></HostName>

          <DataFetchRules>
            <Result>
              <!--Standard ECG Object return via API-->
            </Result>
          </DataFetchRules>
        </ECG>
      </AdapterType>
    </AdapterInformation>
  </RHS>
  <Resultsetstructure>
    <LHSResult>
      <Result> <!--It should be of dynamic type-->
      </Result>
    </LHSResult>
    <RHSResult>
      <Result>
      </Result>
    </RHSResult>
  </Resultsetstructure>
  <BusinessRules>
    <FileLevel>
      <Rule>
        <Name>CheckFileNames</Name>
        <ResultSetStructure>
          <!--I need result from LHS and RHS in this structure to apply Record Level Rules-->
          <FileNames>
            <FileName></FileName>
            <FileName></FileName>
          </FileNames>
          <FileCount></FileCount>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>true</RuleOutput>
        </Status>
        <!-- If File Name Matches-->
        <Status>
          <Name>RED</Name>
          <RuleOutput>false</RuleOutput>
        </Status>
        <!--If Not Match-->
      </Rule>
      <Rule>
        <!--Phase 2-->
        <Name>CheckFileCountDifferenceBetweenLhsAndRhs</Name>
        <ResultSetStructure>
          <!--I need result from LHS and RHS in this structure to apply Record Level Rules-->
          <FileNames>
            <FileName></FileName>
            <FileName></FileName>
          </FileNames>
          <FileCount></FileCount>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>0</RuleOutput>
        </Status>
        <!-- If File Name Matches-->
        <Status>
          <Name>RED</Name>
          <RuleOutput>GreaterThan0</RuleOutput>
        </Status>
        <!--If Not Match-->
        <Status>
          <Name>YELLOW</Name>
          <Condition>LessThan0</Condition>
        </Status>
        <!--If is there any partial match-->
      </Rule>
    </FileLevel>
    <RecordLevel>
      <Rule>
        <Name>MatchTotalRecordCount</Name>
        <ResultSetStructure>
          <RecordCount>
            <SuccessCount></SuccessCount>
            <FailedCount></FailedCount>
            <RejectedCount></RejectedCount>
            <TotalCount></TotalCount>
          </RecordCount>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>true</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>false</RuleOutput>
        </Status>
        <!--If Not Match-->
      </Rule>
      <Rule>
        <Name>MatchFileNamesAndTotalRecordCount</Name>
        <ResultSetStructure>
          <!--I need result from LHS and RHS in this structure to apply File Level Rules-->
          <FileDetails>
            <FileDetail>
              <FileName></FileName>
              <RecordCount>
                <SuccessCount></SuccessCount>
                <FailedCount></FailedCount>
                <RejectedCount></RejectedCount>
                <TotalCount></TotalCount>
              </RecordCount>
            </FileDetail>
            <FileDetail>
              <FileName></FileName>
              <RecordCount>
                <SuccessCount></SuccessCount>
                <FailedCount></FailedCount>
                <RejectedCount></RejectedCount>
                <TotalCount></TotalCount>
              </RecordCount>
            </FileDetail>
          </FileDetails>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>true</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>false</RuleOutput>
        </Status>
        <!--If Not Match-->
        <Status>
          <!--Phase 2-->
          <Name>YELLOW</Name>
          <RuleOutput>false</RuleOutput>
          <!--If is there any partial match-->
        </Status>
      </Rule>
      <Rule>
        <Name>MatchTotalDollarAmount</Name>
        <ResultSetStructure>
          <!--I need result from LHS and RHS in this structure to apply Record Level Rules-->
          <TotalAmount></TotalAmount>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>true</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>false</RuleOutput>
        </Status>
      </Rule>
    </RecordLevel>
    <Timeliness>
      <Rule>
        <Name>FileAvailabilittyCheck</Name>
        <ResultSetStructure>
          <IsFileFound></IsFileFound>
          <Status>
            <Name>GREEN</Name>
            <RuleOutput>true</RuleOutput>
          </Status>
          <Status>
            <Name>RED</Name>
            <RuleOutput>false</RuleOutput>
          </Status>
        </ResultSetStructure>
      </Rule>
      <Rule>
        <Name>EmailAvailabilittyCheck</Name>
        <ResultSetStructure>
          <IsEmailFound></IsEmailFound>
          <Status>
            <Name>GREEN</Name>
            <RuleOutput>true</RuleOutput>
          </Status>
          <Status>
            <Name>RED</Name>
            <RuleOutput>false</RuleOutput>
          </Status>
        </ResultSetStructure>
      </Rule>
    </Timeliness>
    <Threshold>
      <Rule>
        <Name>GreaterThanLowerThreshold</Name>
        <ResultSetStructure>
          <RecordCount></RecordCount>
          <LowerThresholdLimit>40</LowerThresholdLimit>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>IfRecordCountIsGreaterThanLowerThreshold</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>IfRecordCountIsLowerThanLowerThreshold</RuleOutput>
        </Status>
      </Rule>
      <Rule>
        <Name>LessThanUpperThreshold</Name>
        <ResultSetStructure>
          <RecordCount></RecordCount>
          <UpperThresholdLimit>60</UpperThresholdLimit>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>IfRecordCountIsLessThanUpperThreshold</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>IfRecordCountIsGreaterThanUpperThreshold</RuleOutput>
        </Status>
      </Rule>
      <Rule>
        <Name>BetweenLowerAndUpperThreshold</Name>
        <LHSResultSetStructure>
          <RecordCount></RecordCount>
          <LowerThresholdLimit>80</LowerThresholdLimit>
          <UpperThresholdLimit>90</UpperThresholdLimit>
        </LHSResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>IfRecordCountIsBetweenLowerAndUpperThreshold</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>IfRecordCountIsGreaterThanUpperThreshold</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>IfRecordCountIsLowerThanLowerThreshold</RuleOutput>
        </Status>
      </Rule>
      <Rule>
        <Name>PercentageVarianceBetweenNumberOfRecordsInLhsVsRhs</Name>
        <LHSResultSetStructure>
          <RecordCount></RecordCount>
          <LowerThresholdLimit></LowerThresholdLimit>
          <UpperThresholdLimit></UpperThresholdLimit>
        </LHSResultSetStructure>
        <RHSResultSetStructure>
          <RecordCount></RecordCount>
          <LowerThresholdLimit></LowerThresholdLimit>
          <UpperThresholdLimit></UpperThresholdLimit>
        </RHSResultSetStructure>
        <AcceptedDifferenceLimit>10</AcceptedDifferenceLimit>
        <Status>GREEN</Status>
        <Status>RED</Status>
        <Status>YELLOW</Status>
        <!--Phase2-->
      </Rule>
    </Threshold>

    <ZeroRecord></ZeroRecord>
    <StatusCheck>
      <Rule>
        <Name>IsFileDelivered</Name>
        <ResultSetStructure>
          <IsFileDelivered>Yes</IsFileDelivered>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>IfFileDelivered</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>IfFileDidNotDeliver</RuleOutput>
        </Status>
      </Rule>
    </StatusCheck>

    <UniqueId>
      <Rule>
        <Name>UniqueIdMatches</Name>
        <ResultSetStructure>
          <RecordCount></RecordCount>
          <UniqueIds>
            <Id></Id>
            <Id></Id>
          </UniqueIds>
        </ResultSetStructure>
        <Status>
          <Name>GREEN</Name>
          <RuleOutput>IfAllUniqueIdsMatch</RuleOutput>
        </Status>
        <Status>
          <Name>RED</Name>
          <RuleOutput>IfAnuUniqueIdsDoesNotMatch</RuleOutput>
        </Status>
      </Rule>
    </UniqueId>

    <Acknowledgement></Acknowledgement>
  </BusinessRules>
  <ResultProcessing>
    <!--This is for different types of result processing-->
  </ResultProcessing>
</ControlExecutionEvent>
